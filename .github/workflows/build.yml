name: "gcc build"

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
  push:
    branches:
      - base

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  Full_Build_and_Test:
    runs-on: ubuntu-22.04
    container: gentoo/stage3:amd64-openrc
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Install Dependencies
      run: |
        mkdir /etc/portage/repos.conf
        touch /etc/portage/repos.conf/gentoo.conf
        echo '[gentoo]
        sync-type = webrsync' >> /etc/portage/repos.conf/gentoo.conf
        emerge --sync
        emerge app-eselect/eselect-repository dev-vcs/git
        eselect repository add claytabase git https://github.com/claybie/claytabase.git
        eselect repository enable guru
        emaint sync -r claytabase
        emaint sync -r guru
        touch /etc/portage/package.accept_keywords/mariadb-connector-c
        touch /etc/portage/package.accept_keywords/mariadb-connector-python
        touch /etc/portage/package.accept_keywords/diff-so-fancy
        echo '=dev-db/mariadb-connector-c-3.3.4 ~amd64' >> /etc/portage/package.accept_keywords/mariadb-connector-c
        echo '=dev-python/mariadb-1.1.6 ~amd64' >> /etc/portage/package.accept_keywords/mariadb-connector-python
        echo '=app-misc/diff-so-fancy-1.4.3-r1 ~amd64' >> /etc/portage/package.accept_keywords/diff-so-fancy
        emerge --quiet-build dev-db/mariadb dev-lang/luajit net-libs/zeromq dev-python/black dev-python/colorama dev-python/GitPython dev-python/mariadb dev-python/pylint dev-python/pyyaml dev-python/pyzmq dev-python/regex dev-util/cppcheck dev-lua/luacheck app-misc/diff-so-fancy 
    - id: changed-files
      name: Get Changed Files
      uses: Ana06/get-changed-files@v2.2.0
      with:
        filter: |
          src/**
          scripts/**
          sql/**
      continue-on-error: true
    - name: List Changed Files
      if: always()
      run: |
        for changed_file in ${{ steps.changed-files.outputs.all }}; do
          echo "${changed_file}"
        done
    - name: Git Formatting Checks
      if: github.event_name == 'pull_request'
      run: |
        touch git_checks.txt
        bash tools/ci/git.sh origin/${{ github.event.pull_request.base.ref }} >> git_checks.txt || true
        cat git_checks.txt
        if [ -s git_checks.txt ]
        then
          exit 1
        fi
        exit 0
    - name: General File Checks
      if: always()
      run: |
        touch general_checks.txt
        for changed_file in ${{ steps.changed-files.outputs.all }}; do
          if [[ -f $changed_file ]]; then
            bash tools/ci/general.sh ${changed_file} >> general_checks.txt || true
          fi
        done
        cat general_checks.txt
        if [ -s general_checks.txt ]
        then
          exit 1
        fi
        exit 0
    - name: Lua Checks
      if: always()
      run: |
        touch lua_checks.txt
        python3 tools/ci/lua_stylecheck.py test >> lua_checks.txt

        for changed_file in ${{ steps.changed-files.outputs.all }}; do
          if [[ -f $changed_file ]]; then
            if [[ $changed_file == *.lua ]]; then
              bash tools/ci/lua.sh ${changed_file} >> lua_checks.txt || true
            fi
          fi
        done

        python3 tools/ci/check_lua_binding_usage.py >> lua_checks.txt

        cat lua_checks.txt
        if [ -s lua_checks.txt ]
        then
          exit 1
        fi
        exit 0
    - name: SQL Checks
      if: always()
      run: |
        touch sql_checks.txt
        for changed_file in ${{ steps.changed-files.outputs.all }}; do
          if [[ -f $changed_file ]]; then
            if [[ $changed_file == *.sql ]]; then
              bash tools/ci/sql.sh ${changed_file} >> sql_checks.txt || true
            fi
          fi
        done
        cat sql_checks.txt
        if [ -s sql_checks.txt ]
        then
          exit 1
        fi
        exit 0
    - name: Python Checks
      if: always()
      run: |
        touch python_checks.txt
        for changed_file in ${{ steps.changed-files.outputs.all }}; do
          if [[ -f $changed_file ]]; then
            if [[ $changed_file == *.py ]]; then
              bash tools/ci/python.sh ${changed_file} >> python_checks.txt || true
            fi
          fi
        done
        cat python_checks.txt
        if [ -s python_checks.txt ]
        then
          exit 1
        fi
        exit 0
    - name: Configure CMake
      run: |
        export CC=/usr/bin/gcc-12
        export CXX=/usr/bin/g++-12
        mkdir -p build
        CFLAGS=-m64 CXXFLAGS=-m64 LDFLAGS=-m64 cmake -S . -B build
    - name: Build
      run: |
        cmake --build build -j4
    - name: Archive Executables
      uses: actions/upload-artifact@v3
      with:
        name: linux_executables
        path: |
          xi_connect
          xi_map
          xi_search
          xi_world
    - name: Configure and run MySQL
      run: |
        root | emerge --config dev-db/mariadb
        rc-service mysql start
    - name: Create SQL database
      run: |
        mysql -e "CREATE DATABASE xidb;USE xidb;"
    - name: Test MySQL connection
      run: |
        mysql -h 127.0.0.1 -e "SHOW DATABASES"
    - name: Import SQL files
      run: |
        for f in sql/*.sql; do
          echo -e "Importing $f into the database..."
          mysql xidb -h 127.0.0.1 < $f
        done
        mysql xidb -h 127.0.0.1 -e "SHOW tables"
    - name: Copy settings
      run: |
        cp settings/default/* settings/
    - name: Enable Modules
      shell: bash
      run: |
        python3 << EOF
        with open("modules/init.txt", "w") as f:
            f.write("custom\n")
            f.write("era\n")
            f.write("renamer\n")
        EOF
    - name: Startup and character login checks
      uses: nick-invision/retry@v2
      with:
        timeout_minutes: 15
        max_attempts: 3
        retry_on: timeout
        shell: bash
        command: |
          chmod +x xi_connect
          chmod +x xi_map
          chmod +x xi_search
          chmod +x xi_world
          ls -l
          printf "\nStart server processes\n"
          screen -d -m -S xi_connect ./xi_connect --log login-server.log
          screen -d -m -S xi_search ./xi_search --log search-server.log
          screen -d -m -S xi_map ./xi_map --log map-server.log
          screen -d -m -S xi_world ./xi_world --log world-server.log
          printf "\nWaiting 5m for servers to fully start up\n"
          sleep 300s
          printf "\nPopulating database\n"
          mysql xidb -h 127.0.0.1 << EOF
          -- Clean out anything already there (just in case)
          DELETE FROM accounts;
          DELETE FROM chars;
          -- Create an account
          INSERT INTO accounts(id, login, password, timecreate, timelastmodify, status, priv)
          VALUES(1000, 'admin', PASSWORD('admin'), NOW(), NOW(), 1, 1);
          SELECT id, login FROM accounts;
          -- Create a character
          INSERT INTO chars(charid, accid, charname, pos_zone, nation, gmlevel)
          VALUES(1, 1000, 'Test', 0, 0, 5);
          -- Set char_look (default is 0 and trips up scripting)
          INSERT INTO char_look (charid, face, race, size, head, body, hands, legs, feet, main, sub, ranged)
          VALUES (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);
          SELECT charid, face, race FROM char_look;
          -- Update character information
          -- Place near some Robber Crabs in Kuftal Tunnel
          UPDATE chars
          SET
              pos_zone = 174,
              pos_prevzone = 174,
              pos_x = 55,
              pos_y = -9,
              pos_z = -140
          WHERE charid = 1;
          SELECT charid, accid, pos_zone, pos_x, pos_y, pos_z FROM chars;
          -- Set GodMode CharVar = 1
          INSERT INTO char_vars(charid, varname, value)
          VALUES(1, 'GodMode', 1);
          SELECT * FROM char_vars;
          EOF
          printf "\nRunning HeadlessXI for 60 seconds\n"
          python3 << EOF
          import time
          from tools.headlessxi.hxiclient import HXIClient
          hxi_client = HXIClient('admin', 'admin', 'localhost')
          hxi_client.login()
          print('Sleeping 30s')
          time.sleep(30)
          hxi_client.logout()
          EOF
          killall screen
    - name: Check for errors and warnings
      if: ${{ success() || failure() }}
      run: |
        cat login-server*.log
        cat map-server*.log
        cat search-server*.log
        cat world-server*.log
        if grep -qi "warning\|error\|crash" login-server*.log; then
            exit -1
        fi
        if grep -qi "warning\|error\|crash" map-server*.log; then
            exit -1
        fi
        if grep -qi "warning\|error\|crash" search-server*.log; then
            exit -1
        fi
        if grep -qi "warning\|error\|crash" world-server*.log; then
            exit -1
        fi
    - name: Assign odd zones a different port
      run: |
        mysql xidb -h 127.0.0.1 -e "UPDATE xidb.zone_settings SET zoneport = 54231 WHERE zoneid % 2 = 0;"
    - name: Copy settings
      run: |
        cp settings/default/* settings/
    - name: Startup checks
      run: |
        ls -l
        printf "\nStart server processes\n"
        screen -d -m -S xi_connect ./xi_connect --log login-server.log
        screen -d -m -S xi_search ./xi_search --log search-server.log
        screen -d -m -S xi_map ./xi_map --log map-server-0.log --ip 127.0.0.1 --port 54230
        screen -d -m -S xi_map ./xi_map --log map-server-1.log --ip 127.0.0.1 --port 54231
        screen -d -m -S xi_world ./xi_world --log world-server.log
        sleep 300s
        killall screen
    - name: Check for errors and warnings
      if: ${{ success() || failure() }}
      run: |
        cat login-server*.log
        cat search-server*.log
        cat map-server-0*.log
        cat map-server-1*.log
        cat world-server*.log
        if grep -qi "warning\|error\|crash" login-server*.log; then
            exit -1
        fi
        if grep -qi "warning\|error\|crash" search-server*.log; then
            exit -1
        fi
        if grep -qi "warning\|error\|crash" map-server-0*.log; then
            exit -1
        fi
        if grep -qi "warning\|error\|crash" map-server-1*.log; then
          exit -1
        fi
        if grep -qi "warning\|error\|crash" world-server*.log; then
          exit -1
        fi
