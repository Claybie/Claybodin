name: "gcc 12.2 "

on:
  pull_request:
   types:
      - opened
      - synchronize
      - reopened
  push:
    branches:
      - base

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  gcc12_amd64_build:
    runs-on: ubuntu-22.04
    container: gentoo/stage3:amd64-openrc
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Install Dependencies
      run: |
        echo 'FEATURES="-ipc-sandbox -network-sandbox -pid-sandbox"' >> /etc/portage/make.conf
        mkdir /etc/portage/repos.conf
        touch /etc/portage/repos.conf/gentoo.conf
        echo '[gentoo]
        sync-type = webrsync' >> /etc/portage/repos.conf/gentoo.conf
        emerge --sync
        emerge --quiet-build app-eselect/eselect-repository dev-vcs/git
        eselect repository add claytabase git https://github.com/claybie/claytabase.git
        eselect repository enable guru
        emaint sync -r claytabase
        emaint sync -r guru
        touch /etc/portage/package.accept_keywords/mariadb-connector-c
        touch /etc/portage/package.accept_keywords/mariadb-connector-python
        touch /etc/portage/package.accept_keywords/diff-so-fancy
        echo '=dev-db/mariadb-connector-c-3.3.4 ~amd64' >> /etc/portage/package.accept_keywords/mariadb-connector-c
        echo '=dev-python/mariadb-1.1.6 ~amd64' >> /etc/portage/package.accept_keywords/mariadb-connector-python
        echo '=app-misc/diff-so-fancy-1.4.3-r1 ~amd64' >> /etc/portage/package.accept_keywords/diff-so-fancy
        emerge --quiet-build dev-db/mariadb dev-lang/luajit net-libs/zeromq dev-python/black dev-python/colorama dev-python/GitPython dev-python/mariadb dev-python/pylint dev-python/pyyaml dev-python/pyzmq dev-python/regex dev-util/cppcheck dev-lua/luacheck app-misc/diff-so-fancy 
    - id: changed-files
      name: Get Changed Files
      uses: Ana06/get-changed-files@v2.2.0
      with:
        filter: |
          src/**
          scripts/**
          sql/**
      continue-on-error: true
    - name: List Changed Files
      if: always()
      run: |
        for changed_file in ${{ steps.changed-files.outputs.all }}; do
          echo "${changed_file}"
        done
    - name: Git Formatting Checks
      if: github.event_name == 'pull_request'
      run: |
        touch git_checks.txt
        bash tools/ci/git.sh origin/${{ github.event.pull_request.base.ref }} >> git_checks.txt || true
        cat git_checks.txt
        if [ -s git_checks.txt ]
        then
          exit 1
        fi
        exit 0
    - name: General File Checks
      if: always()
      run: |
        touch general_checks.txt
        for changed_file in ${{ steps.changed-files.outputs.all }}; do
          if [[ -f $changed_file ]]; then
            bash tools/ci/general.sh ${changed_file} >> general_checks.txt || true
          fi
        done
        cat general_checks.txt
        if [ -s general_checks.txt ]
        then
          exit 1
        fi
        exit 0
    - name: CPP Checks
      if: always()
      run: |
        touch cpp_checks.txt
        for changed_file in ${{ steps.changed-files.outputs.all }}; do
          if [[ -f $changed_file ]]; then
            if [[ $changed_file == *.cpp ]]; then
              bash tools/ci/cpp.sh ${changed_file} 2>> cpp_checks.txt || true
            fi
          fi
        done
        cat cpp_checks.txt
        if [ -s cpp_checks.txt ]
        then
          exit 1
        fi
        exit 0
# Clang compilation and checks are being omitted for now. Clang 14 is not current on 
# Gentoo, and using the stage3 docker image would require building the llvm toolchain 
# (too much time/too many resourches). Considering this verification a low priority.
#    - name: CPP Formatting Checks
#      if: always()
#      run: |
#        clang-format-14 -version
#        touch cpp_formatting_checks.txt
#        for changed_file in ${{ steps.changed-files.outputs.all }}; do
#          if [[ -f $changed_file ]]; then
#            if [[ $changed_file == *.cpp || $changed_file == *.h ]]; then
#              clang-format-14 -style=file -i ${changed_file}
#            fi
#          fi
#        done
#        git diff --color >> cpp_formatting_checks.txt
#        git reset --hard
#        if [ -s cpp_formatting_checks.txt ]
#        then
#          echo ""
#          echo "You have errors in your C++ code formatting."
#          echo "Please see below in red for the incorrect formatting, and in green for the correct formatting."
#          echo "You can either fix the formatting by hand or use clang-format."
#          echo "(You can safely ignore warnings about \$TERM and tput)"
#          echo ""
#          cat cpp_formatting_checks.txt | diff-so-fancy || true
#          exit 1
#        fi
#        exit 0
#    - name: Upload CPP Formatting Diff
#      if: hashFiles('cpp_formatting_checks.txt') != ''
#      uses: actions/upload-artifact@v3
#      with:
#        name: clang_format_diff
#        path: |
#          cpp_formatting_checks.txt
    - name: Lua Checks
      if: always()
      run: |
        touch lua_checks.txt
        python3 tools/ci/lua_stylecheck.py test >> lua_checks.txt

        for changed_file in ${{ steps.changed-files.outputs.all }}; do
          if [[ -f $changed_file ]]; then
            if [[ $changed_file == *.lua ]]; then
              bash tools/ci/lua.sh ${changed_file} >> lua_checks.txt || true
            fi
          fi
        done

        python3 tools/ci/check_lua_binding_usage.py >> lua_checks.txt

        cat lua_checks.txt
        if [ -s lua_checks.txt ]
        then
          exit 1
        fi
        exit 0
    - name: SQL Checks
      if: always()
      run: |
        touch sql_checks.txt
        for changed_file in ${{ steps.changed-files.outputs.all }}; do
          if [[ -f $changed_file ]]; then
            if [[ $changed_file == *.sql ]]; then
              bash tools/ci/sql.sh ${changed_file} >> sql_checks.txt || true
            fi
          fi
        done
        cat sql_checks.txt
        if [ -s sql_checks.txt ]
        then
          exit 1
        fi
        exit 0
    - name: Python Checks
      if: always()
      run: |
        touch python_checks.txt
        for changed_file in ${{ steps.changed-files.outputs.all }}; do
          if [[ -f $changed_file ]]; then
            if [[ $changed_file == *.py ]]; then
              bash tools/ci/python.sh ${changed_file} >> python_checks.txt || true
            fi
          fi
        done
        cat python_checks.txt
        if [ -s python_checks.txt ]
        then
          exit 1
        fi
        exit 0
    - name: Configure CMake GCC
      run: |
        export CC=/usr/bin/gcc-12
        export CXX=/usr/bin/g++-12
        mkdir -p build
        CFLAGS=-m64 CXXFLAGS=-m64 LDFLAGS=-m64 cmake -S . -B build
    - name: Build
      run: |
        cmake --build build -j4
# See above regarding Clang.
# - name: Configure CMake Clang
#      run: |
#        export CC=/usr/bin/clang-14
#        export CXX=/usr/bin/clang++-14
#        cmake -S . -B build
#    - name: Build
#      run: |
#        cmake --build build -j4
