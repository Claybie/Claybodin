name: "Gentoo build"

on:
  push:
    branches:
    # disabling for testing
    #  - gentoo-workflow

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  Sanity_Checks:
    runs-on: ubuntu-22.04
    container: gentoo/stage3:amd64-desktop-systemd
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Install Dependencies
      run: | 
        echo 'FEATURES="-ipc-sandbox -network-sandbox -pid-sandbox binpkg-request-signature"' >> /etc/portage/make.conf
        echo 'EMERGE_DEFAULT_OPTS="--binpkg-respect-use=y --getbinpkg=y"' >> /etc/portage/make.conf
        mkdir /etc/portage/repos.conf
        touch /etc/portage/repos.conf/gentoo.conf
        echo '[gentoo]
        sync-type = webrsync' >> /etc/portage/repos.conf/gentoo.conf
        emerge --sync
        emerge --quiet-build app-eselect/eselect-repository dev-vcs/git
        eselect repository add claytabase git https://github.com/claybie/claytabase.git
        eselect repository enable guru
        emaint sync -r claytabase
        emaint sync -r guru
        touch /etc/portage/package.accept_keywords/mariadb-connector-c
        touch /etc/portage/package.accept_keywords/mariadb-connector-python
        touch /etc/portage/package.accept_keywords/diff-so-fancy
        echo '>=dev-db/mariadb-connector-c-3.3.4 ~amd64' >> /etc/portage/package.accept_keywords/mariadb-connector-c
        echo '>=dev-python/mariadb-1.1.6 ~amd64' >> /etc/portage/package.accept_keywords/mariadb-connector-python
        echo '>=app-misc/diff-so-fancy-1.4.3-r1 ~amd64' >> /etc/portage/package.accept_keywords/diff-so-fancy
        emerge --quiet-build dev-db/mariadb dev-lang/luajit net-libs/zeromq dev-python/black dev-python/colorama dev-python/GitPython dev-python/mariadb dev-python/pylint dev-python/pyyaml dev-python/pyzmq dev-python/regex dev-util/cppcheck dev-lua/luacheck app-misc/diff-so-fancy sys-devel/clang 
        ln -s /usr/lib/llvm/16/bin/clang-format /usr/bin/
    - id: changed-files
      name: Get Changed Files
      uses: Ana06/get-changed-files@v2.2.0
      with:
        filter: |
          src/**
          scripts/**
          sql/**
      continue-on-error: true
    - name: List Changed Files
      if: always()
      run: |
        for changed_file in ${{ steps.changed-files.outputs.all }}; do
          echo "${changed_file}"
        done
    - name: Git Formatting Checks
      if: github.event_name == 'pull_request'
      run: |
        touch git_checks.txt
        bash tools/ci/git.sh origin/${{ github.event.pull_request.base.ref }} >> git_checks.txt || true
        cat git_checks.txt
        if [ -s git_checks.txt ]
        then
          exit 1
        fi
        exit 0
    - name: General File Checks
      if: always()
      run: |
        touch general_checks.txt
        for changed_file in ${{ steps.changed-files.outputs.all }}; do
          if [[ -f $changed_file ]]; then
            bash tools/ci/general.sh ${changed_file} >> general_checks.txt || true
          fi
        done
        cat general_checks.txt
        if [ -s general_checks.txt ]
        then
          exit 1
        fi
        exit 0
    - name: CPP Checks
      if: always()
      run: |
        touch cpp_checks.txt
        for changed_file in ${{ steps.changed-files.outputs.all }}; do
          if [[ -f $changed_file ]]; then
            if [[ $changed_file == *.cpp ]]; then
              bash tools/ci/cpp.sh ${changed_file} 2>> cpp_checks.txt || true
            fi
          fi
        done
        cat cpp_checks.txt
        if [ -s cpp_checks.txt ]
        then
          exit 1
        fi
        exit 0
    - name: CPP Formatting Checks
      if: always()
      run: |
        git clone https://github.com/claybie/LeafSpringCog.git
        cd LeafSpringCog
        clang-format -version
        touch cpp_formatting_checks.txt
        for changed_file in '${{ steps.changed-files.outputs.all }}'; do
          if [[ -f $changed_file ]]; then
            if [[ $changed_file == *.cpp || $changed_file == *.h ]]; then
              clang-format -style=file -i ${changed_file}
            fi
          fi
        done
        git diff --color >> cpp_formatting_checks.txt
        git reset --hard
        if [ -s cpp_formatting_checks.txt ]
        then
          echo ""
          echo "You have errors in your C++ code formatting."
          echo "Please see below in red for the incorrect formatting, and in green for the correct formatting."
          echo "You can either fix the formatting by hand or use clang-format."
          echo "(You can safely ignore warnings about \$TERM and tput)"
          echo ""
          cat cpp_formatting_checks.txt | diff-so-fancy || true
          exit 1
        fi
        exit 0
    - name: Upload CPP Formatting Diff
      if: hashFiles('cpp_formatting_checks.txt') != ''
      uses: actions/upload-artifact@v3
      with:
        name: clang_format_diff
        path: |
          cpp_formatting_checks.txt
    - name: Lua Checks
      if: always()
      run: |
        touch lua_checks.txt
        python3 tools/ci/lua_stylecheck.py test >> lua_checks.txt

        for changed_file in '${{ steps.changed-files.outputs.all }}'; do
          if [[ -f $changed_file ]]; then
            if [[ $changed_file == *.lua ]]; then
              bash tools/ci/lua.sh ${changed_file} >> lua_checks.txt || true
            fi
          fi
        done

        python3 tools/ci/check_lua_binding_usage.py >> lua_checks.txt

        cat lua_checks.txt
        if [ -s lua_checks.txt ]
        then
          exit 1
        fi
        exit 0
    - name: SQL Checks
      if: always()
      run: |
        touch sql_checks.txt
        for changed_file in '${{ steps.changed-files.outputs.all }}'; do
          if [[ -f $changed_file ]]; then
            if [[ $changed_file == *.sql ]]; then
              bash tools/ci/sql.sh ${changed_file} >> sql_checks.txt || true
            fi
          fi
        done
        cat sql_checks.txt
        if [ -s sql_checks.txt ]
        then
          exit 1
        fi
        exit 0
    - name: Python Checks
      if: always()
      run: |
        touch python_checks.txt
        for changed_file in '${{ steps.changed-files.outputs.all }}'; do
          if [[ -f $changed_file ]]; then
            if [[ $changed_file == *.py ]]; then
              bash tools/ci/python.sh ${changed_file} >> python_checks.txt || true
            fi
          fi
        done
        cat python_checks.txt
        if [ -s python_checks.txt ]
        then
          exit 1
        fi
        exit 0

  Linux_Clang16_64bit:
    needs: Sanity_Checks
    runs-on: ubuntu-22.04
    container: gentoo/stage3:amd64-desktop-systemd
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 1
    - name: Install Dependencies
      run: |
        echo 'FEATURES="-ipc-sandbox -network-sandbox -pid-sandbox binpkg-request-signature"' >> /etc/portage/make.conf
        echo 'EMERGE_DEFAULT_OPTS="--binpkg-respect-use=y --getbinpkg=y"' >> /etc/portage/make.conf
        mkdir /etc/portage/repos.conf
        touch /etc/portage/repos.conf/gentoo.conf
        echo '[gentoo]
        sync-type = webrsync' >> /etc/portage/repos.conf/gentoo.conf
        emerge --sync
        emerge --quiet-build app-eselect/eselect-repository dev-vcs/git
        eselect repository add claytabase git https://github.com/claybie/claytabase.git
        eselect repository enable guru
        emaint sync -r claytabase
        emaint sync -r guru
        touch /etc/portage/package.accept_keywords/mariadb-connector-c
        touch /etc/portage/package.accept_keywords/mariadb-connector-python
        touch /etc/portage/package.accept_keywords/diff-so-fancy
        echo '>=dev-db/mariadb-connector-c-3.3.4 ~amd64' >> /etc/portage/package.accept_keywords/mariadb-connector-c
        echo '>=dev-python/mariadb-1.1.6 ~amd64' >> /etc/portage/package.accept_keywords/mariadb-connector-python
        echo '>=app-misc/diff-so-fancy-1.4.3-r1 ~amd64' >> /etc/portage/package.accept_keywords/diff-so-fancy
        emerge --quiet-build dev-db/mariadb dev-lang/luajit net-libs/zeromq dev-python/black dev-python/colorama dev-python/GitPython dev-python/mariadb dev-python/pylint dev-python/pyyaml dev-python/pyzmq dev-python/regex dev-util/cppcheck dev-lua/luacheck app-misc/diff-so-fancy sys-devel/clang 
        ln -s /usr/lib/llvm/16/bin/clang-format /usr/bin/
    #- name: Cache 'build' folder
    #  uses: actions/cache@v3
    #  with:
    #    path: build
    #    key: ${{ runner.os }}-clang
    - name: Configure CMake
      run: |
        export CC=/usr/lib/llvm/16/bin/clang
        export CXX=/usr/lib/llvm/16/bin/clang++
        mkdir -p build
        cmake -S . -B build
    - name: Build
      run: |
        cmake --build build -j4
    - name: Archive Executables
      uses: actions/upload-artifact@v3
      with:
        name: linux_executables
        path: |
          xi_connect
          xi_map
          xi_search
          xi_world

  Linux_ClangTidy16_64bit:
    needs: Sanity_Checks
    runs-on: ubuntu-22.04
    container: gentoo/stage3:amd64-desktop-systemd
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 1
    - name: Install Dependencies
      run: |
        echo 'FEATURES="-ipc-sandbox -network-sandbox -pid-sandbox binpkg-request-signature"' >> /etc/portage/make.conf
        echo 'EMERGE_DEFAULT_OPTS="--binpkg-respect-use=y --getbinpkg=y"' >> /etc/portage/make.conf
        mkdir /etc/portage/repos.conf
        touch /etc/portage/repos.conf/gentoo.conf
        echo '[gentoo]
        sync-type = webrsync' >> /etc/portage/repos.conf/gentoo.conf
        emerge --sync
        emerge --quiet-build app-eselect/eselect-repository dev-vcs/git
        eselect repository add claytabase git https://github.com/claybie/claytabase.git
        eselect repository enable guru
        emaint sync -r claytabase
        emaint sync -r guru
        touch /etc/portage/package.accept_keywords/mariadb-connector-c
        touch /etc/portage/package.accept_keywords/mariadb-connector-python
        touch /etc/portage/package.accept_keywords/diff-so-fancy
        echo '>=dev-db/mariadb-connector-c-3.3.4 ~amd64' >> /etc/portage/package.accept_keywords/mariadb-connector-c
        echo '>=dev-python/mariadb-1.1.6 ~amd64' >> /etc/portage/package.accept_keywords/mariadb-connector-python
        echo '>=app-misc/diff-so-fancy-1.4.3-r1 ~amd64' >> /etc/portage/package.accept_keywords/diff-so-fancy
        emerge --quiet-build dev-db/mariadb dev-lang/luajit net-libs/zeromq dev-python/black dev-python/colorama dev-python/GitPython dev-python/mariadb dev-python/pylint dev-python/pyyaml dev-python/pyzmq dev-python/regex dev-util/cppcheck dev-lua/luacheck app-misc/diff-so-fancy sys-devel/clang 
        ln -s /usr/lib/llvm/16/bin/clang-format /usr/bin/
    #- name: Cache 'build' folder
    #  uses: actions/cache@v3
    #  with:
    #    path: build
    #    key: ${{ runner.os }}-clang
    - name: Configure CMake
      run: |
        export CC=/usr/lib/llvm/16/bin/clang
        export CXX=/usr/lib/llvm/16/bin/clang++
        mkdir -p build
        cmake -S . -B build -DENABLE_CLANG_TIDY=ON
    - name: Build
      run: |
        touch clang-tidy.txt
        cmake --build build -j4 >> clang-tidy.txt || true
        cat clang-tidy.txt
        if grep -q warning\|error clang-tidy.txt; then
            exit 1
        fi

  Linux_GCC13_64bit:
    needs: Sanity_Checks
    runs-on: ubuntu-22.04
    container: gentoo/stage3:amd64-desktop-systemd
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 1
    - name: Install Dependencies
      run: |
        echo 'FEATURES="-ipc-sandbox -network-sandbox -pid-sandbox binpkg-request-signature"' >> /etc/portage/make.conf
        echo 'EMERGE_DEFAULT_OPTS="--binpkg-respect-use=y --getbinpkg=y"' >> /etc/portage/make.conf
        mkdir /etc/portage/repos.conf
        touch /etc/portage/repos.conf/gentoo.conf
        echo '[gentoo]
        sync-type = webrsync' >> /etc/portage/repos.conf/gentoo.conf
        emerge --sync
        emerge --quiet-build app-eselect/eselect-repository dev-vcs/git
        eselect repository add claytabase git https://github.com/claybie/claytabase.git
        eselect repository enable guru
        emaint sync -r claytabase
        emaint sync -r guru
        touch /etc/portage/package.accept_keywords/mariadb-connector-c
        touch /etc/portage/package.accept_keywords/mariadb-connector-python
        touch /etc/portage/package.accept_keywords/diff-so-fancy
        echo '>=dev-db/mariadb-connector-c-3.3.4 ~amd64' >> /etc/portage/package.accept_keywords/mariadb-connector-c
        echo '>=dev-python/mariadb-1.1.6 ~amd64' >> /etc/portage/package.accept_keywords/mariadb-connector-python
        echo '>=app-misc/diff-so-fancy-1.4.3-r1 ~amd64' >> /etc/portage/package.accept_keywords/diff-so-fancy
        emerge --quiet-build dev-db/mariadb dev-lang/luajit net-libs/zeromq dev-python/black dev-python/colorama dev-python/GitPython dev-python/mariadb dev-python/pylint dev-python/pyyaml dev-python/pyzmq dev-python/regex dev-util/cppcheck dev-lua/luacheck app-misc/diff-so-fancy sys-devel/clang 
        ln -s /usr/lib/llvm/16/bin/clang-format /usr/bin/
    #- name: Cache 'build' folder
    #  uses: actions/cache@v3
    #  with:
    #    path: build
    #    key: ${{ runner.os }}-gcc
    - name: Configure CMake GCC
      run: |
        export CC=/usr/bin/gcc
        export CXX=/usr/bin/g++
        mkdir -p build
        CFLAGS=-m64 CXXFLAGS=-m64 LDFLAGS=-m64 cmake -S . -B build
    - name: Build
      run: |
        cmake --build build -j4
    - name: Configure CMake Clang
      run: |
        export CC=/usr/lib/llvm/16/bin/clang
        export CXX=/usr/lib/llvm/16/bin/clang++
        cmake -S . -B build
    - name: Build
      run: |
        cmake --build build -j4

  Full_Startup_Checks_Linux:
    runs-on: ubuntu-22.04
    needs: Linux_Clang16_64bit
    container: gentoo/stage3:amd64-desktop-systemd
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 1
    - uses: actions/download-artifact@v3
      with:
        name: linux_executables
        path: .
    - name: Install Dependencies
      run: |
        echo 'FEATURES="-ipc-sandbox -network-sandbox -pid-sandbox binpkg-request-signature"' >> /etc/portage/make.conf
        echo 'EMERGE_DEFAULT_OPTS="--binpkg-respect-use=y --getbinpkg=y"' >> /etc/portage/make.conf
        mkdir /etc/portage/repos.conf
        touch /etc/portage/repos.conf/gentoo.conf
        echo '[gentoo]
        sync-type = webrsync' >> /etc/portage/repos.conf/gentoo.conf
        emerge --sync
        emerge --quiet-build app-eselect/eselect-repository dev-vcs/git
        eselect repository add claytabase git https://github.com/claybie/claytabase.git
        eselect repository enable guru
        emaint sync -r claytabase
        emaint sync -r guru
        touch /etc/portage/package.accept_keywords/mariadb-connector-c
        touch /etc/portage/package.accept_keywords/mariadb-connector-python
        touch /etc/portage/package.accept_keywords/diff-so-fancy
        echo '>=dev-db/mariadb-connector-c-3.3.4 ~amd64' >> /etc/portage/package.accept_keywords/mariadb-connector-c
        echo '>=dev-python/mariadb-1.1.6 ~amd64' >> /etc/portage/package.accept_keywords/mariadb-connector-python
        echo '>=app-misc/diff-so-fancy-1.4.3-r1 ~amd64' >> /etc/portage/package.accept_keywords/diff-so-fancy
        emerge --quiet-build dev-db/mariadb dev-lang/luajit net-libs/zeromq dev-python/black dev-python/colorama dev-python/GitPython dev-python/mariadb dev-python/pylint dev-python/pyyaml dev-python/pyzmq dev-python/regex dev-util/cppcheck dev-lua/luacheck app-misc/diff-so-fancy sys-devel/clang 
        ln -s /usr/lib/llvm/16/bin/clang-format /usr/bin/
    - name: Verify MySQL connection from container
      run: |
        mysql -h claybodin.org -ugitwork -premotepass -e "SHOW DATABASES"
    - name: Import SQL files
      run: |
        for f in sql/*.sql; do
          echo -e "Importing $f into the database..."
          mysql gitxidb -h claybodin.org -ugitwork -premotepass < $f
        done
        mysql gitxidb -h claybodin.org -ugitwork -premotepass -e "SHOW tables"
    - name: Copy settings
      run: |
        cp settings/default/* settings/
    - name: Enable Modules
      shell: bash
      run: |
        python3 << EOF
        with open("modules/init.txt", "w") as f:
            f.write("custom\n")
            f.write("era\n")
            f.write("renamer\n")
        EOF
    - name: Startup and character login checks
      uses: nick-invision/retry@v2
      with:
        timeout_minutes: 15
        max_attempts: 3
        retry_on: timeout
        shell: bash
        command: |
          chmod +x xi_connect
          chmod +x xi_map
          chmod +x xi_search
          chmod +x xi_world
          ls -l

          printf "\nStart server processes\n"
          screen -d -m -S xi_connect ./xi_connect --log login-server.log
          screen -d -m -S xi_search ./xi_search --log search-server.log
          screen -d -m -S xi_map ./xi_map --log map-server.log
          screen -d -m -S xi_world ./xi_world --log world-server.log

          printf "\nWaiting 5m for servers to fully start up\n"
          sleep 300s

          # define bash helper function to help diagnose any sql errors
          function mysqlcmd() { mysql gitxidb -h claybodin.org -ugitwork -premotepass --verbose -e "$@"; }
          printf "\nPopulating database\n"

          # Clean out anything already there (just in case)
          mysqlcmd "DELETE FROM accounts;"
          mysqlcmd "DELETE FROM chars;"
          mysqlcmd "DELETE FROM char_look;"
          mysqlcmd "DELETE FROM char_stats;"

          # Clean tables that are made from triggers on insert to char table
          mysqlcmd "DELETE FROM char_equip;"
          mysqlcmd "DELETE FROM char_exp;"
          mysqlcmd "DELETE FROM char_history;"
          mysqlcmd "DELETE FROM char_inventory;"
          mysqlcmd "DELETE FROM char_jobs;"
          mysqlcmd "DELETE FROM char_pet;"
          mysqlcmd "DELETE FROM char_points;"
          mysqlcmd "DELETE FROM char_profile;"
          mysqlcmd "DELETE FROM char_storage;"
          mysqlcmd "DELETE FROM char_unlocks;"

          # Create an account
          mysqlcmd "INSERT INTO accounts (id, login, password, timecreate, timelastmodify, status, priv)
          VALUES(1000, 'admin', PASSWORD('admin'), NOW(), NOW(), 1, 1);
          SELECT id, login, content_ids FROM accounts;"

          # Create a character
          mysqlcmd "INSERT INTO chars (charid, accid, charname, pos_zone, nation, gmlevel)
          VALUES(1, 1000, 'Test', 0, 0, 5);
          SELECT charid, accid, charname, pos_zone FROM chars;"

          # Set char_look (default is 0 and trips up scripting)
          mysqlcmd "INSERT INTO char_look (charid, face, race, size, head, body, hands, legs, feet, main, sub, ranged)
          VALUES (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);
          SELECT charid, face, race FROM char_look;"

          # Populate more char tables with defaults
          mysqlcmd "INSERT INTO char_stats (charid, mjob)
          VALUES(1, 1);
          SELECT charid, mjob FROM char_stats;"

          # Update character information
          # Place near some Robber Crabs in Kuftal Tunnel
          mysqlcmd "UPDATE chars
          SET
              pos_zone = 174,
              pos_prevzone = 174,
              pos_x = 55,
              pos_y = -9,
              pos_z = -140
          WHERE charid = 1;"

          mysqlcmd "SELECT charid, accid, charname, pos_zone, pos_x, pos_y, pos_z FROM chars;"
          # Set GodMode CharVar = 1
          mysqlcmd "INSERT INTO char_vars(charid, varname, value)
          VALUES(1, 'GodMode', 1);"

          printf "\nRunning HeadlessXI for 60 seconds\n"
          python3 << EOF
          import time
          try:
              from tools.headlessxi.hxiclient import HXIClient
              hxi_client = HXIClient('admin', 'admin', 'localhost')
              hxi_client.login()
              print('Sleeping 60s')
              time.sleep(60)
              hxi_client.logout()
              exit(0)
          except Exception as e:
              exit(-1)
          EOF
          hxi_result=$?

          pkill -SIGINT xi_map
          pkill -SIGINT xi_search
          pkill -SIGINT xi_connect
          pkill -SIGINT xi_world

          # fail if hxi had a non-zero exit code
          if [[ "$hxi_result" -ne "0" ]]; then
              echo "hxi exited with code $hxi_result"
              exit $hxi_result
          fi
    - name: Check for errors and warnings
      if: ${{ success() || failure() }}
      run: |
        cat login-server*.log
        cat map-server*.log
        cat search-server*.log
        cat world-server*.log

        if grep -qi "warning\|error\|crash" login-server*.log; then
            exit -1
        fi

        if grep -qi "warning\|error\|crash" map-server*.log; then
            exit -1
        fi

        if grep -qi "warning\|error\|crash" search-server*.log; then
            exit -1
        fi

        if grep -qi "warning\|error\|crash" world-server*.log; then
            exit -1
        fi
        
  MultiInstance_Startup_Checks_Linux:
    runs-on: ubuntu-22.04
    needs: Linux_Clang16_64bit
    container: gentoo/stage3:amd64-desktop-systemd
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 1
    - uses: actions/download-artifact@v3
      with:
        name: linux_executables
        path: .
    - name: Install Dependencies
      run: |
        echo 'FEATURES="-ipc-sandbox -network-sandbox -pid-sandbox binpkg-request-signature"' >> /etc/portage/make.conf
        echo 'EMERGE_DEFAULT_OPTS="--binpkg-respect-use=y --getbinpkg=y"' >> /etc/portage/make.conf
        mkdir /etc/portage/repos.conf
        touch /etc/portage/repos.conf/gentoo.conf
        echo '[gentoo]
        sync-type = webrsync' >> /etc/portage/repos.conf/gentoo.conf
        emerge --sync
        emerge --quiet-build app-eselect/eselect-repository dev-vcs/git
        eselect repository add claytabase git https://github.com/claybie/claytabase.git
        eselect repository enable guru
        emaint sync -r claytabase
        emaint sync -r guru
        touch /etc/portage/package.accept_keywords/mariadb-connector-c
        touch /etc/portage/package.accept_keywords/mariadb-connector-python
        touch /etc/portage/package.accept_keywords/diff-so-fancy
        echo '>=dev-db/mariadb-connector-c-3.3.4 ~amd64' >> /etc/portage/package.accept_keywords/mariadb-connector-c
        echo '>=dev-python/mariadb-1.1.6 ~amd64' >> /etc/portage/package.accept_keywords/mariadb-connector-python
        echo '>=app-misc/diff-so-fancy-1.4.3-r1 ~amd64' >> /etc/portage/package.accept_keywords/diff-so-fancy
        emerge --quiet-build dev-db/mariadb dev-lang/luajit net-libs/zeromq dev-python/black dev-python/colorama dev-python/GitPython dev-python/mariadb dev-python/pylint dev-python/pyyaml dev-python/pyzmq dev-python/regex dev-util/cppcheck dev-lua/luacheck app-misc/diff-so-fancy sys-devel/clang 
        ln -s /usr/lib/llvm/16/bin/clang-format /usr/bin/
    - name: Verify MySQL connection from container
      run: |
        mysql -h claybodin.org -ugitwork -premotepass -e "SHOW DATABASES"
    - name: Import SQL files
      run: |
        for f in sql/*.sql; do
          echo -e "Importing $f into the database..."
          mysql gitxidb -h claybodin.org -ugitwork -premotepass < $f
        done
        mysql gitxidb -h claybodin.org -ugitwork -premotepass -e "SHOW tables"
    - name: Assign odd zones a different port
      run: |
        mysql gitxidb -h claybodin.org -ugitwork -premotepass -e "UPDATE xidb.zone_settings SET zoneport = 54231 WHERE zoneid % 2 = 0;"
    - name: Copy settings
      run: |
        cp settings/default/* settings/
    - name: Startup checks
      run: |
        chmod +x xi_connect
        chmod +x xi_map
        chmod +x xi_search
        chmod +x xi_world
        ls -l

        printf "\nStart server processes\n"
        screen -d -m -S xi_connect ./xi_connect --log login-server.log
        screen -d -m -S xi_search ./xi_search --log search-server.log
        screen -d -m -S xi_map ./xi_map --log map-server-0.log --ip 3.137.26.94 --port 54230
        screen -d -m -S xi_map ./xi_map --log map-server-1.log --ip 3.137.26.94 --port 54231
        screen -d -m -S xi_world ./xi_world --log world-server.log
        sleep 300s
        killall screen
    - name: Check for errors and warnings
      if: ${{ success() || failure() }}
      run: |
        cat login-server*.log
        cat search-server*.log
        cat map-server-0*.log
        cat map-server-1*.log
        cat world-server*.log

        if grep -qi "warning\|error\|crash" login-server*.log; then
            exit -1
        fi

        if grep -qi "warning\|error\|crash" search-server*.log; then
            exit -1
        fi

        if grep -qi "warning\|error\|crash" map-server-0*.log; then
            exit -1
        fi

        if grep -qi "warning\|error\|crash" map-server-1*.log; then
          exit -1
        fi

        if grep -qi "warning\|error\|crash" world-server*.log; then
          exit -1
        fi
