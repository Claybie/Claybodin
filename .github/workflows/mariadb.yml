name: "mariadb 10.6.11 "

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
  push:
    branches:
      - base

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  GCC12_64bit:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 1
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y software-properties-common cmake libmariadb-dev-compat libluajit-5.1-dev libzmq3-dev zlib1g-dev libssl-dev binutils-dev
    #- name: Cache 'build' folder
    #  uses: actions/cache@v3
    #  with:
    #    path: build
    #    key: ${{ runner.os }}-gcc
    - name: Configure CMake
      run: |
        export CC=/usr/bin/gcc-12
        export CXX=/usr/bin/g++-12
        mkdir -p build
        CFLAGS=-m64 CXXFLAGS=-m64 LDFLAGS=-m64 cmake -S . -B build
    - name: Build
      run: |
        cmake --build build -j4
    - name: Archive Executables
      uses: actions/upload-artifact@v3
      with:
        name: linux_executables
        path: |
          xi_connect
          xi_map
          xi_search
          xi_world

  Full_Startup_Checks:
    runs-on: ubuntu-latest
    needs: GCC12_64bit
    services:
      mysql:
        image: mariadb:10.6.11
        env:
          MYSQL_DATABASE: xidb
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=10s --health-retries=10
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 1
    - uses: actions/download-artifact@v3
      with:
        name: linux_executables
        path: .
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y software-properties-common cmake mariadb-server mariadb-client libmariadb-dev-compat libluajit-5.1-dev libzmq3-dev zlib1g-dev libssl-dev luarocks binutils-dev
    - name: Verify MySQL connection from container
      run: |
        mysql -h 127.0.0.1 -uroot -proot -e "SHOW DATABASES"
    - name: Import SQL files
      run: |
        for f in sql/*.sql; do
          echo -e "Importing $f into the database..."
          mysql xidb -h 127.0.0.1 -uroot -proot < $f
        done
        mysql xidb -h 127.0.0.1 -uroot -proot -e "SHOW tables"
    - name: Copy settings
      run: |
        cp settings/default/* settings/
    - name: Enable Modules
      shell: bash
      run: |
        python3 << EOF
        with open("modules/init.txt", "w") as f:
            f.write("custom\n")
            f.write("era\n")
            f.write("renamer\n")
        EOF
    - name: Startup and character login checks
      uses: nick-invision/retry@v2
      with:
        timeout_minutes: 15
        max_attempts: 3
        retry_on: timeout
        shell: bash
        command: |
          chmod +x xi_connect
          chmod +x xi_map
          chmod +x xi_search
          chmod +x xi_world
          ls -l

          printf "\nStart server processes\n"
          screen -d -m -S xi_connect ./xi_connect --log login-server.log
          screen -d -m -S xi_search ./xi_search --log search-server.log
          screen -d -m -S xi_map ./xi_map --log map-server.log
          screen -d -m -S xi_world ./xi_world --log world-server.log

          printf "\nWaiting 5m for servers to fully start up\n"
          sleep 300s

          printf "\nPopulating database\n"
          mysql xidb -h 127.0.0.1 -uroot -proot << EOF
          -- Clean out anything already there (just in case)
          DELETE FROM accounts;
          DELETE FROM chars;
          -- Create an account
          INSERT INTO accounts(id, login, password, timecreate, timelastmodify, status, priv)
          VALUES(1000, 'admin', PASSWORD('admin'), NOW(), NOW(), 1, 1);
          SELECT id, login FROM accounts;
          -- Create a character
          INSERT INTO chars(charid, accid, charname, pos_zone, nation, gmlevel)
          VALUES(1, 1000, 'Test', 0, 0, 5);
          -- Set char_look (default is 0 and trips up scripting)
          INSERT INTO char_look (charid, face, race, size, head, body, hands, legs, feet, main, sub, ranged)
          VALUES (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);
          SELECT charid, face, race FROM char_look;
          -- Update character information
          -- Place near some Robber Crabs in Kuftal Tunnel
          UPDATE chars
          SET
              pos_zone = 174,
              pos_prevzone = 174,
              pos_x = 55,
              pos_y = -9,
              pos_z = -140
          WHERE charid = 1;
          SELECT charid, accid, pos_zone, pos_x, pos_y, pos_z FROM chars;
          -- Set GodMode CharVar = 1
          INSERT INTO char_vars(charid, varname, value)
          VALUES(1, 'GodMode', 1);
          SELECT * FROM char_vars;
          EOF

          printf "\nRunning HeadlessXI for 60 seconds\n"
          python3 << EOF
          import time
          from tools.headlessxi.hxiclient import HXIClient
          hxi_client = HXIClient('admin', 'admin', 'localhost')
          hxi_client.login()
          print('Sleeping 30s')
          time.sleep(30)
          hxi_client.logout()
          EOF

          killall screen
    - name: Check for errors and warnings
      if: ${{ success() || failure() }}
      run: |
        cat login-server*.log
        cat map-server*.log
        cat search-server*.log
        cat world-server*.log

        if grep -qi "warning\|error\|crash" login-server*.log; then
            exit -1
        fi

        if grep -qi "warning\|error\|crash" map-server*.log; then
            exit -1
        fi

        if grep -qi "warning\|error\|crash" search-server*.log; then
            exit -1
        fi

        if grep -qi "warning\|error\|crash" world-server*.log; then
            exit -1
        fi

  MultiInstance_Startup_Checks:
    runs-on: ubuntu-latest
    needs: GCC12_64bit
    services:
      mysql:
        image: mariadb:10.6.11
        env:
          MYSQL_DATABASE: xidb
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=10s --health-retries=10
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 1
    - uses: actions/download-artifact@v3
      with:
        name: linux_executables
        path: .
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y software-properties-common cmake mariadb-server mariadb-client libmariadb-dev-compat libluajit-5.1-dev libzmq3-dev zlib1g-dev libssl-dev luarocks binutils-dev
    - name: Verify MySQL connection from container
      run: |
        mysql -h 127.0.0.1 -uroot -proot -e "SHOW DATABASES"
    - name: Import SQL files
      run: |
        for f in sql/*.sql; do
          echo -e "Importing $f into the database..."
          mysql xidb -h 127.0.0.1 -uroot -proot < $f
        done
        mysql xidb -h 127.0.0.1 -uroot -proot -e "SHOW tables"
    - name: Assign odd zones a different port
      run: |
        mysql xidb -h 127.0.0.1 -uroot -proot -e "UPDATE xidb.zone_settings SET zoneport = 54231 WHERE zoneid % 2 = 0;"
    - name: Copy settings
      run: |
        cp settings/default/* settings/
    - name: Startup checks
      env:
        MYSQL_HOST: mysql
      run: |
        chmod +x xi_connect
        chmod +x xi_map
        chmod +x xi_search
        chmod +x xi_world
        ls -l

        printf "\nStart server processes\n"
        screen -d -m -S xi_connect ./xi_connect --log login-server.log
        screen -d -m -S xi_search ./xi_search --log search-server.log
        screen -d -m -S xi_map ./xi_map --log map-server-0.log --ip 127.0.0.1 --port 54230
        screen -d -m -S xi_map ./xi_map --log map-server-1.log --ip 127.0.0.1 --port 54231
        screen -d -m -S xi_world ./xi_world --log world-server.log
        sleep 300s
        killall screen
    - name: Check for errors and warnings
      if: ${{ success() || failure() }}
      run: |
        cat login-server*.log
        cat search-server*.log
        cat map-server-0*.log
        cat map-server-1*.log
        cat world-server*.log

        if grep -qi "warning\|error\|crash" login-server*.log; then
            exit -1
        fi

        if grep -qi "warning\|error\|crash" search-server*.log; then
            exit -1
        fi

        if grep -qi "warning\|error\|crash" map-server-0*.log; then
            exit -1
        fi

        if grep -qi "warning\|error\|crash" map-server-1*.log; then
          exit -1
        fi

        if grep -qi "warning\|error\|crash" world-server*.log; then
          exit -1
        fi
